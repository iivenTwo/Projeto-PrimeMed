/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import dao.ExameDAO;
import dao.PacienteDAO;
import java.awt.HeadlessException;
import java.sql.Date;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 *
 * @author Lopes
 */

import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.DocumentFilter;


    

public class telaExame extends javax.swing.JFrame {
    
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(telaExame.class.getName());

    /**
     * Creates new form TelaPrincipal
     */
    public telaExame() {
initComponents();
        // Carrega o ícone da pasta do projeto
        ImageIcon icon = new ImageIcon(getClass().getResource("/imgs/logo.png"));

        // Define o ícone da janela
        setIconImage(icon.getImage());
setLocationRelativeTo(null); // Centraliza o JFrame na tela
    try {

        // Máscara para Data de Nascimento: 00/00/0000
        javax.swing.text.MaskFormatter formatoData = new javax.swing.text.MaskFormatter("##/##/2025");
        formatoData.setPlaceholderCharacter('_');
        formatoData.install(dataExame);
        
        // Máscara para Horário do Exame: 00:00
        javax.swing.text.MaskFormatter formatoHora = new javax.swing.text.MaskFormatter("##:##");
        formatoHora.setPlaceholderCharacter('_');
        formatoHora.install(horarioExame);
 // Aplicar o filtro de capitalização no campo nomePacienteCadastro
    } catch (java.text.ParseException e) {
    }
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {//GEN-BEGIN:initComponents

        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        nomePacienteExame = new javax.swing.JFormattedTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        botaoIncluirExame = new javax.swing.JButton();
        botaoLimparExame = new javax.swing.JButton();
        botaoSairAgendamento = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        horarioExame = new javax.swing.JFormattedTextField();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        solicitadosExame = new javax.swing.JTextArea();
        dataExame = new javax.swing.JFormattedTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        finalidadeExame = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Exame - PrimeMed");
        setBackground(new java.awt.Color(255, 255, 255));
        setMinimumSize(new java.awt.Dimension(650, 460));
        setResizable(false);
        getContentPane().setLayout(null);

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jPanel3.setMinimumSize(new java.awt.Dimension(660, 500));
        jPanel3.setName("telalogin"); // NOI18N
        jPanel3.setPreferredSize(new java.awt.Dimension(660, 500));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(31, 31, 31));
        jLabel2.setText("Exame");

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(31, 31, 31));
        jLabel9.setText("Nome Completo:");

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(31, 31, 31));
        jLabel10.setText("Exames Solicitados:");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(31, 31, 31));
        jLabel1.setText("Data:");

        botaoIncluirExame.setBackground(new java.awt.Color(26, 74, 138));
        botaoIncluirExame.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        botaoIncluirExame.setForeground(new java.awt.Color(255, 255, 255));
        botaoIncluirExame.setText("Incluir");
        botaoIncluirExame.setBorderPainted(false);
        botaoIncluirExame.setDefaultCapable(false);
        botaoIncluirExame.setFocusPainted(false);
        botaoIncluirExame.setFocusable(false);
        botaoIncluirExame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoIncluirExameActionPerformed(evt);
            }
        });

        botaoLimparExame.setBackground(new java.awt.Color(26, 74, 138));
        botaoLimparExame.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        botaoLimparExame.setForeground(new java.awt.Color(255, 255, 255));
        botaoLimparExame.setText("Limpar");
        botaoLimparExame.setBorderPainted(false);
        botaoLimparExame.setDefaultCapable(false);
        botaoLimparExame.setFocusPainted(false);
        botaoLimparExame.setFocusable(false);
        botaoLimparExame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoLimparExameActionPerformed(evt);
            }
        });

        botaoSairAgendamento.setBackground(new java.awt.Color(26, 74, 138));
        botaoSairAgendamento.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        botaoSairAgendamento.setForeground(new java.awt.Color(255, 255, 255));
        botaoSairAgendamento.setText("Sair");
        botaoSairAgendamento.setBorderPainted(false);
        botaoSairAgendamento.setDefaultCapable(false);
        botaoSairAgendamento.setFocusPainted(false);
        botaoSairAgendamento.setFocusable(false);
        botaoSairAgendamento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoSairAgendamentoActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel6.setText("Finalidade:");

        horarioExame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                horarioExameActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel8.setText("Horário:");

        solicitadosExame.setColumns(20);
        solicitadosExame.setRows(5);
        jScrollPane1.setViewportView(solicitadosExame);

        finalidadeExame.setColumns(20);
        finalidadeExame.setRows(5);
        jScrollPane2.setViewportView(finalidadeExame);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel10)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(nomePacienteExame, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addGap(19, 19, 19)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(dataExame, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(botaoSairAgendamento)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel6)))
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(horarioExame, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                                .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(botaoIncluirExame)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botaoLimparExame, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(100, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(jLabel1)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(nomePacienteExame, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(horarioExame, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dataExame, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botaoIncluirExame)
                    .addComponent(botaoSairAgendamento)
                    .addComponent(botaoLimparExame))
                .addGap(0, 238, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel3);
        jPanel3.setBounds(0, 130, 700, 500);

        jPanel1.setBackground(new java.awt.Color(14, 63, 139));

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/lgoobranco.png"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(200, 200, 200)
                .addComponent(jLabel3)
                .addContainerGap(300, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(24, Short.MAX_VALUE)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        getContentPane().add(jPanel1);
        jPanel1.setBounds(0, 0, 700, 130);

        pack();
    }//GEN-END:initComponents

    private void botaoLimparExameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoLimparExameActionPerformed
        nomePacienteExame.setText(""); // Limpar do Cadastro
        finalidadeExame.setText("");
        solicitadosExame.setText("");

        dataExame.setText("");
        horarioExame.setText("");
    }//GEN-LAST:event_botaoLimparExameActionPerformed

    private void botaoSairAgendamentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoSairAgendamentoActionPerformed
        this.dispose();
        telaPrincipal tela = new telaPrincipal("Administrador");  // cria a tela principal
        tela.setVisible(true);  
    }//GEN-LAST:event_botaoSairAgendamentoActionPerformed

    private void botaoIncluirExameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoIncluirExameActionPerformed
    // Captura os dados dos campos
    String nomePaciente = nomePacienteExame.getText().trim();
    String data = dataExame.getText().trim();
    String horario = horarioExame.getText().trim();
    String exames = solicitadosExame.getText().trim();
    String finalidade = finalidadeExame.getText().trim();

    // Valid0ação do nome do paciente (máx 32 caracteres)
    if (nomePaciente.isEmpty() || nomePaciente.length() > 32) {
        JOptionPane.showMessageDialog(this, "Nome do paciente inválido (máx 32 caracteres).");
        return;
    }

    // Validação da data no formato dd/MM/yyyy
    if (!data.matches("\\d{2}/\\d{2}/\\d{4}")) {
        JOptionPane.showMessageDialog(this, "Data inválida. Formato esperado: dd/MM/aaaa (ex: 20/06/2025).");
        return;
    }

    // Validação do horário (formato HH:mm e dentro do horário permitido)
    if (!horario.matches("\\d{2}:\\d{2}")) {
        JOptionPane.showMessageDialog(this, "Horário inválido. Formato esperado: HH:mm (ex: 08:30).");
        return;
    }

    try {
        String[] partes = horario.split(":");
        int hora = Integer.parseInt(partes[0]);
        int minuto = Integer.parseInt(partes[1]);

        if (hora < 7 || hora > 22 || minuto < 0 || minuto > 59) {
            JOptionPane.showMessageDialog(this, "Horário fora do período permitido (07:00 às 22:00).");
            return;
        }

        if (hora == 22 && minuto > 0) {
            JOptionPane.showMessageDialog(this, "O último horário permitido é 22:00.");
            return;
        }
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Erro ao validar o horário. Verifique o formato (ex: 08:30).");
        return;
    }

    // Verifica se exames e finalidade estão preenchidos
    if (exames.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Preencha os exames solicitados.");
        return;
    }

    if (finalidade.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Preencha a finalidade do exame.");
        return;
    }

// Busca o ID do paciente no banco, pode ser null se não encontrado
Integer pacienteId = null;

try {
    PacienteDAO pacienteDAO = new PacienteDAO();
    int idEncontrado = pacienteDAO.buscarIdPorNome(nomePaciente);

    if (idEncontrado != 0) {
        pacienteId = idEncontrado;
    } else {
        // Paciente não encontrado, pacienteId fica null
        // Opcional: mostrar mensagem informando que paciente não foi encontrado,
        // mas que o exame será inserido sem paciente vinculado
        JOptionPane.showMessageDialog(this, 
            "Paciente não encontrado no banco. O exame será inserido sem paciente vinculado.");
    }
    } catch (Exception ex) {
        JOptionPane.showMessageDialog(this, "Erro ao buscar paciente: " + ex.getMessage());
        return;
    }

// Agora pode usar pacienteId (que pode ser null) para inserir o exame


    // Converte a data para java.sql.Date
    java.sql.Date dataSql;
    try {
        SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
        java.util.Date dataUtil = formato.parse(data);
        dataSql = new java.sql.Date(dataUtil.getTime());
    } catch (ParseException e) {
        JOptionPane.showMessageDialog(this, "Erro ao converter a data.");
        return;
    }

    // Insere o exame no banco
    try {
        ExameDAO exameDAO = new ExameDAO();
        boolean sucesso = exameDAO.inserirExame(pacienteId, exames, finalidade, dataSql);

        if (sucesso) {
            JOptionPane.showMessageDialog(this, 
                "Exame incluído com sucesso!\n\n" +
                "Nome do Paciente: " + nomePaciente + "\n" +
                "Data: " + data + "\n" +
                "Horário: " + horario + "\n" +
                "Exames Solicitados:\n" + exames + "\n\n" +
                "Finalidade:\n" + finalidade
            );

            // Limpa os campos
            nomePacienteExame.setText("");
            dataExame.setText("");
            horarioExame.setText("");
            solicitadosExame.setText("");
            finalidadeExame.setText("");
        } else {
            JOptionPane.showMessageDialog(this, "Erro ao salvar o exame no banco.");
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Erro ao salvar o exame: " + e.getMessage());
    }
    }//GEN-LAST:event_botaoIncluirExameActionPerformed

    private void horarioExameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_horarioExameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_horarioExameActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new telaExame().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botaoIncluirExame;
    private javax.swing.JButton botaoLimparExame;
    private javax.swing.JButton botaoSairAgendamento;
    private javax.swing.JFormattedTextField dataExame;
    private javax.swing.JTextArea finalidadeExame;
    private javax.swing.JFormattedTextField horarioExame;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JFormattedTextField nomePacienteExame;
    private javax.swing.JTextArea solicitadosExame;
    // End of variables declaration//GEN-END:variables
}
